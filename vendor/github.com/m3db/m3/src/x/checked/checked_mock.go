// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/m3db/m3/src/x/checked (interfaces: Bytes)

// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Package checked is a generated GoMock package.
package checked

import (
	"reflect"

	"github.com/m3db/m3/src/x/resource"

	"github.com/golang/mock/gomock"
)

// MockBytes is a mock of Bytes interface
type MockBytes struct {
	ctrl     *gomock.Controller
	recorder *MockBytesMockRecorder
}

// MockBytesMockRecorder is the mock recorder for MockBytes
type MockBytesMockRecorder struct {
	mock *MockBytes
}

// NewMockBytes creates a new mock instance
func NewMockBytes(ctrl *gomock.Controller) *MockBytes {
	mock := &MockBytes{ctrl: ctrl}
	mock.recorder = &MockBytesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBytes) EXPECT() *MockBytesMockRecorder {
	return m.recorder
}

// Append mocks base method
func (m *MockBytes) Append(arg0 byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Append", arg0)
}

// Append indicates an expected call of Append
func (mr *MockBytesMockRecorder) Append(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockBytes)(nil).Append), arg0)
}

// AppendAll mocks base method
func (m *MockBytes) AppendAll(arg0 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AppendAll", arg0)
}

// AppendAll indicates an expected call of AppendAll
func (mr *MockBytesMockRecorder) AppendAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendAll", reflect.TypeOf((*MockBytes)(nil).AppendAll), arg0)
}

// Bytes mocks base method
func (m *MockBytes) Bytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Bytes indicates an expected call of Bytes
func (mr *MockBytesMockRecorder) Bytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockBytes)(nil).Bytes))
}

// Cap mocks base method
func (m *MockBytes) Cap() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cap")
	ret0, _ := ret[0].(int)
	return ret0
}

// Cap indicates an expected call of Cap
func (mr *MockBytesMockRecorder) Cap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cap", reflect.TypeOf((*MockBytes)(nil).Cap))
}

// DecReads mocks base method
func (m *MockBytes) DecReads() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DecReads")
}

// DecReads indicates an expected call of DecReads
func (mr *MockBytesMockRecorder) DecReads() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecReads", reflect.TypeOf((*MockBytes)(nil).DecReads))
}

// DecRef mocks base method
func (m *MockBytes) DecRef() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DecRef")
}

// DecRef indicates an expected call of DecRef
func (mr *MockBytesMockRecorder) DecRef() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecRef", reflect.TypeOf((*MockBytes)(nil).DecRef))
}

// DecWrites mocks base method
func (m *MockBytes) DecWrites() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DecWrites")
}

// DecWrites indicates an expected call of DecWrites
func (mr *MockBytesMockRecorder) DecWrites() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecWrites", reflect.TypeOf((*MockBytes)(nil).DecWrites))
}

// DelayFinalizer mocks base method
func (m *MockBytes) DelayFinalizer() resource.Closer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelayFinalizer")
	ret0, _ := ret[0].(resource.Closer)
	return ret0
}

// DelayFinalizer indicates an expected call of DelayFinalizer
func (mr *MockBytesMockRecorder) DelayFinalizer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelayFinalizer", reflect.TypeOf((*MockBytes)(nil).DelayFinalizer))
}

// Finalize mocks base method
func (m *MockBytes) Finalize() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Finalize")
}

// Finalize indicates an expected call of Finalize
func (mr *MockBytesMockRecorder) Finalize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finalize", reflect.TypeOf((*MockBytes)(nil).Finalize))
}

// IncReads mocks base method
func (m *MockBytes) IncReads() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncReads")
}

// IncReads indicates an expected call of IncReads
func (mr *MockBytesMockRecorder) IncReads() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncReads", reflect.TypeOf((*MockBytes)(nil).IncReads))
}

// IncRef mocks base method
func (m *MockBytes) IncRef() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncRef")
}

// IncRef indicates an expected call of IncRef
func (mr *MockBytesMockRecorder) IncRef() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncRef", reflect.TypeOf((*MockBytes)(nil).IncRef))
}

// IncWrites mocks base method
func (m *MockBytes) IncWrites() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncWrites")
}

// IncWrites indicates an expected call of IncWrites
func (mr *MockBytesMockRecorder) IncWrites() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncWrites", reflect.TypeOf((*MockBytes)(nil).IncWrites))
}

// Len mocks base method
func (m *MockBytes) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len
func (mr *MockBytesMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockBytes)(nil).Len))
}

// MoveRef mocks base method
func (m *MockBytes) MoveRef() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MoveRef")
}

// MoveRef indicates an expected call of MoveRef
func (mr *MockBytesMockRecorder) MoveRef() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveRef", reflect.TypeOf((*MockBytes)(nil).MoveRef))
}

// NumReaders mocks base method
func (m *MockBytes) NumReaders() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumReaders")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumReaders indicates an expected call of NumReaders
func (mr *MockBytesMockRecorder) NumReaders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumReaders", reflect.TypeOf((*MockBytes)(nil).NumReaders))
}

// NumRef mocks base method
func (m *MockBytes) NumRef() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumRef")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumRef indicates an expected call of NumRef
func (mr *MockBytesMockRecorder) NumRef() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumRef", reflect.TypeOf((*MockBytes)(nil).NumRef))
}

// NumWriters mocks base method
func (m *MockBytes) NumWriters() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumWriters")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumWriters indicates an expected call of NumWriters
func (mr *MockBytesMockRecorder) NumWriters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumWriters", reflect.TypeOf((*MockBytes)(nil).NumWriters))
}

// Reset mocks base method
func (m *MockBytes) Reset(arg0 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset", arg0)
}

// Reset indicates an expected call of Reset
func (mr *MockBytesMockRecorder) Reset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockBytes)(nil).Reset), arg0)
}

// Resize mocks base method
func (m *MockBytes) Resize(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Resize", arg0)
}

// Resize indicates an expected call of Resize
func (mr *MockBytesMockRecorder) Resize(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resize", reflect.TypeOf((*MockBytes)(nil).Resize), arg0)
}
