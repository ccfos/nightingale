// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

option go_package = "github.com/m3db/m3/src/metrics/generated/proto/metricpb";

package metricpb;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/m3db/m3/src/metrics/generated/proto/aggregationpb/aggregation.proto";
import "github.com/m3db/m3/src/metrics/generated/proto/policypb/policy.proto";
import "github.com/m3db/m3/src/metrics/generated/proto/pipelinepb/pipeline.proto";

message PipelineMetadata {
  aggregationpb.AggregationID aggregation_id = 1 [(gogoproto.nullable) = false];
  repeated policypb.StoragePolicy storage_policies = 2 [(gogoproto.nullable) = false];
  pipelinepb.AppliedPipeline pipeline = 3 [(gogoproto.nullable) = false];
  policypb.DropPolicy drop_policy = 4;
}

message Metadata {
  repeated PipelineMetadata pipelines = 1 [(gogoproto.nullable) = false];
}

message StagedMetadata {
  int64 cutover_nanos = 1;
  bool tombstoned = 2;
  Metadata metadata = 3 [(gogoproto.nullable) = false];
}

message StagedMetadatas {
  repeated StagedMetadata metadatas = 1 [(gogoproto.nullable) = false];
}

message ForwardMetadata {
  aggregationpb.AggregationID aggregation_id = 1 [(gogoproto.nullable) = false];
  policypb.StoragePolicy storage_policy = 2 [(gogoproto.nullable) = false];
  pipelinepb.AppliedPipeline pipeline = 3 [(gogoproto.nullable) = false];
  uint32 source_id = 4;
  int32 num_forwarded_times = 5;
}

message TimedMetadata {
  aggregationpb.AggregationID aggregation_id = 1 [(gogoproto.nullable) = false];
  policypb.StoragePolicy storage_policy = 2 [(gogoproto.nullable) = false];
}
