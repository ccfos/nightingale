// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/m3db/m3/src/dbnode/generated/proto/namespace/namespace.proto

// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
	Package namespace is a generated protocol buffer package.

	It is generated from these files:
		github.com/m3db/m3/src/dbnode/generated/proto/namespace/namespace.proto
		github.com/m3db/m3/src/dbnode/generated/proto/namespace/schema.proto

	It has these top-level messages:
		RetentionOptions
		IndexOptions
		NamespaceOptions
		AggregationOptions
		Aggregation
		AggregatedAttributes
		DownsampleOptions
		Registry
		NamespaceRuntimeOptions
		SchemaOptions
		SchemaHistory
		FileDescriptorSet
*/
package namespace

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/gogo/protobuf/types"
import google_protobuf1 "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type RetentionOptions struct {
	RetentionPeriodNanos                     int64 `protobuf:"varint,1,opt,name=retentionPeriodNanos,proto3" json:"retentionPeriodNanos,omitempty"`
	BlockSizeNanos                           int64 `protobuf:"varint,2,opt,name=blockSizeNanos,proto3" json:"blockSizeNanos,omitempty"`
	BufferFutureNanos                        int64 `protobuf:"varint,3,opt,name=bufferFutureNanos,proto3" json:"bufferFutureNanos,omitempty"`
	BufferPastNanos                          int64 `protobuf:"varint,4,opt,name=bufferPastNanos,proto3" json:"bufferPastNanos,omitempty"`
	BlockDataExpiry                          bool  `protobuf:"varint,5,opt,name=blockDataExpiry,proto3" json:"blockDataExpiry,omitempty"`
	BlockDataExpiryAfterNotAccessPeriodNanos int64 `protobuf:"varint,6,opt,name=blockDataExpiryAfterNotAccessPeriodNanos,proto3" json:"blockDataExpiryAfterNotAccessPeriodNanos,omitempty"`
	FutureRetentionPeriodNanos               int64 `protobuf:"varint,7,opt,name=futureRetentionPeriodNanos,proto3" json:"futureRetentionPeriodNanos,omitempty"`
}

func (m *RetentionOptions) Reset()                    { *m = RetentionOptions{} }
func (m *RetentionOptions) String() string            { return proto.CompactTextString(m) }
func (*RetentionOptions) ProtoMessage()               {}
func (*RetentionOptions) Descriptor() ([]byte, []int) { return fileDescriptorNamespace, []int{0} }

func (m *RetentionOptions) GetRetentionPeriodNanos() int64 {
	if m != nil {
		return m.RetentionPeriodNanos
	}
	return 0
}

func (m *RetentionOptions) GetBlockSizeNanos() int64 {
	if m != nil {
		return m.BlockSizeNanos
	}
	return 0
}

func (m *RetentionOptions) GetBufferFutureNanos() int64 {
	if m != nil {
		return m.BufferFutureNanos
	}
	return 0
}

func (m *RetentionOptions) GetBufferPastNanos() int64 {
	if m != nil {
		return m.BufferPastNanos
	}
	return 0
}

func (m *RetentionOptions) GetBlockDataExpiry() bool {
	if m != nil {
		return m.BlockDataExpiry
	}
	return false
}

func (m *RetentionOptions) GetBlockDataExpiryAfterNotAccessPeriodNanos() int64 {
	if m != nil {
		return m.BlockDataExpiryAfterNotAccessPeriodNanos
	}
	return 0
}

func (m *RetentionOptions) GetFutureRetentionPeriodNanos() int64 {
	if m != nil {
		return m.FutureRetentionPeriodNanos
	}
	return 0
}

type IndexOptions struct {
	Enabled        bool  `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	BlockSizeNanos int64 `protobuf:"varint,2,opt,name=blockSizeNanos,proto3" json:"blockSizeNanos,omitempty"`
}

func (m *IndexOptions) Reset()                    { *m = IndexOptions{} }
func (m *IndexOptions) String() string            { return proto.CompactTextString(m) }
func (*IndexOptions) ProtoMessage()               {}
func (*IndexOptions) Descriptor() ([]byte, []int) { return fileDescriptorNamespace, []int{1} }

func (m *IndexOptions) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *IndexOptions) GetBlockSizeNanos() int64 {
	if m != nil {
		return m.BlockSizeNanos
	}
	return 0
}

type NamespaceOptions struct {
	BootstrapEnabled      bool                        `protobuf:"varint,1,opt,name=bootstrapEnabled,proto3" json:"bootstrapEnabled,omitempty"`
	FlushEnabled          bool                        `protobuf:"varint,2,opt,name=flushEnabled,proto3" json:"flushEnabled,omitempty"`
	WritesToCommitLog     bool                        `protobuf:"varint,3,opt,name=writesToCommitLog,proto3" json:"writesToCommitLog,omitempty"`
	CleanupEnabled        bool                        `protobuf:"varint,4,opt,name=cleanupEnabled,proto3" json:"cleanupEnabled,omitempty"`
	RepairEnabled         bool                        `protobuf:"varint,5,opt,name=repairEnabled,proto3" json:"repairEnabled,omitempty"`
	RetentionOptions      *RetentionOptions           `protobuf:"bytes,6,opt,name=retentionOptions" json:"retentionOptions,omitempty"`
	SnapshotEnabled       bool                        `protobuf:"varint,7,opt,name=snapshotEnabled,proto3" json:"snapshotEnabled,omitempty"`
	IndexOptions          *IndexOptions               `protobuf:"bytes,8,opt,name=indexOptions" json:"indexOptions,omitempty"`
	SchemaOptions         *SchemaOptions              `protobuf:"bytes,9,opt,name=schemaOptions" json:"schemaOptions,omitempty"`
	ColdWritesEnabled     bool                        `protobuf:"varint,10,opt,name=coldWritesEnabled,proto3" json:"coldWritesEnabled,omitempty"`
	RuntimeOptions        *NamespaceRuntimeOptions    `protobuf:"bytes,11,opt,name=runtimeOptions" json:"runtimeOptions,omitempty"`
	CacheBlocksOnRetrieve *google_protobuf1.BoolValue `protobuf:"bytes,12,opt,name=cacheBlocksOnRetrieve" json:"cacheBlocksOnRetrieve,omitempty"`
	AggregationOptions    *AggregationOptions         `protobuf:"bytes,13,opt,name=aggregationOptions" json:"aggregationOptions,omitempty"`
	ExtendedOptions       *google_protobuf.Any        `protobuf:"bytes,14,opt,name=extendedOptions" json:"extendedOptions,omitempty"`
}

func (m *NamespaceOptions) Reset()                    { *m = NamespaceOptions{} }
func (m *NamespaceOptions) String() string            { return proto.CompactTextString(m) }
func (*NamespaceOptions) ProtoMessage()               {}
func (*NamespaceOptions) Descriptor() ([]byte, []int) { return fileDescriptorNamespace, []int{2} }

func (m *NamespaceOptions) GetBootstrapEnabled() bool {
	if m != nil {
		return m.BootstrapEnabled
	}
	return false
}

func (m *NamespaceOptions) GetFlushEnabled() bool {
	if m != nil {
		return m.FlushEnabled
	}
	return false
}

func (m *NamespaceOptions) GetWritesToCommitLog() bool {
	if m != nil {
		return m.WritesToCommitLog
	}
	return false
}

func (m *NamespaceOptions) GetCleanupEnabled() bool {
	if m != nil {
		return m.CleanupEnabled
	}
	return false
}

func (m *NamespaceOptions) GetRepairEnabled() bool {
	if m != nil {
		return m.RepairEnabled
	}
	return false
}

func (m *NamespaceOptions) GetRetentionOptions() *RetentionOptions {
	if m != nil {
		return m.RetentionOptions
	}
	return nil
}

func (m *NamespaceOptions) GetSnapshotEnabled() bool {
	if m != nil {
		return m.SnapshotEnabled
	}
	return false
}

func (m *NamespaceOptions) GetIndexOptions() *IndexOptions {
	if m != nil {
		return m.IndexOptions
	}
	return nil
}

func (m *NamespaceOptions) GetSchemaOptions() *SchemaOptions {
	if m != nil {
		return m.SchemaOptions
	}
	return nil
}

func (m *NamespaceOptions) GetColdWritesEnabled() bool {
	if m != nil {
		return m.ColdWritesEnabled
	}
	return false
}

func (m *NamespaceOptions) GetRuntimeOptions() *NamespaceRuntimeOptions {
	if m != nil {
		return m.RuntimeOptions
	}
	return nil
}

func (m *NamespaceOptions) GetCacheBlocksOnRetrieve() *google_protobuf1.BoolValue {
	if m != nil {
		return m.CacheBlocksOnRetrieve
	}
	return nil
}

func (m *NamespaceOptions) GetAggregationOptions() *AggregationOptions {
	if m != nil {
		return m.AggregationOptions
	}
	return nil
}

func (m *NamespaceOptions) GetExtendedOptions() *google_protobuf.Any {
	if m != nil {
		return m.ExtendedOptions
	}
	return nil
}

// AggregationOptions is a set of options for aggregating data
// within the namespace.
type AggregationOptions struct {
	// aggregations is a repeated field to support the ability to send aggregated data
	// to a namespace also receiving unaggregated data. In this case, the namespace will
	// have one Aggregation with aggregated set to false and another with aggregated set to true.
	Aggregations []*Aggregation `protobuf:"bytes,1,rep,name=aggregations" json:"aggregations,omitempty"`
}

func (m *AggregationOptions) Reset()                    { *m = AggregationOptions{} }
func (m *AggregationOptions) String() string            { return proto.CompactTextString(m) }
func (*AggregationOptions) ProtoMessage()               {}
func (*AggregationOptions) Descriptor() ([]byte, []int) { return fileDescriptorNamespace, []int{3} }

func (m *AggregationOptions) GetAggregations() []*Aggregation {
	if m != nil {
		return m.Aggregations
	}
	return nil
}

// Aggregation describes data points within the namespace.
type Aggregation struct {
	// aggregated is true if data points are aggregated, false otherwise.
	Aggregated bool `protobuf:"varint,1,opt,name=aggregated,proto3" json:"aggregated,omitempty"`
	// attributes specifies how to aggregate data when aggregated is set to true.
	// This field is ignored when aggregated is false and required when aggregated
	// is true.
	Attributes *AggregatedAttributes `protobuf:"bytes,2,opt,name=attributes" json:"attributes,omitempty"`
}

func (m *Aggregation) Reset()                    { *m = Aggregation{} }
func (m *Aggregation) String() string            { return proto.CompactTextString(m) }
func (*Aggregation) ProtoMessage()               {}
func (*Aggregation) Descriptor() ([]byte, []int) { return fileDescriptorNamespace, []int{4} }

func (m *Aggregation) GetAggregated() bool {
	if m != nil {
		return m.Aggregated
	}
	return false
}

func (m *Aggregation) GetAttributes() *AggregatedAttributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// AggregatedAttributes describe how to aggregate data.
type AggregatedAttributes struct {
	// resolutionNanos is the time range to aggregate data across.
	ResolutionNanos   int64              `protobuf:"varint,1,opt,name=resolutionNanos,proto3" json:"resolutionNanos,omitempty"`
	DownsampleOptions *DownsampleOptions `protobuf:"bytes,2,opt,name=downsampleOptions" json:"downsampleOptions,omitempty"`
}

func (m *AggregatedAttributes) Reset()                    { *m = AggregatedAttributes{} }
func (m *AggregatedAttributes) String() string            { return proto.CompactTextString(m) }
func (*AggregatedAttributes) ProtoMessage()               {}
func (*AggregatedAttributes) Descriptor() ([]byte, []int) { return fileDescriptorNamespace, []int{5} }

func (m *AggregatedAttributes) GetResolutionNanos() int64 {
	if m != nil {
		return m.ResolutionNanos
	}
	return 0
}

func (m *AggregatedAttributes) GetDownsampleOptions() *DownsampleOptions {
	if m != nil {
		return m.DownsampleOptions
	}
	return nil
}

// DownsampleOptions is a set of options related to downsampling data.
type DownsampleOptions struct {
	// all indicates whether to send data points to this namespace. If false,
	// data points must be sent via rollup/recording rules. Defaults to true.
	All bool `protobuf:"varint,1,opt,name=all,proto3" json:"all,omitempty"`
}

func (m *DownsampleOptions) Reset()                    { *m = DownsampleOptions{} }
func (m *DownsampleOptions) String() string            { return proto.CompactTextString(m) }
func (*DownsampleOptions) ProtoMessage()               {}
func (*DownsampleOptions) Descriptor() ([]byte, []int) { return fileDescriptorNamespace, []int{6} }

func (m *DownsampleOptions) GetAll() bool {
	if m != nil {
		return m.All
	}
	return false
}

type Registry struct {
	Namespaces map[string]*NamespaceOptions `protobuf:"bytes,1,rep,name=namespaces" json:"namespaces,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Registry) Reset()                    { *m = Registry{} }
func (m *Registry) String() string            { return proto.CompactTextString(m) }
func (*Registry) ProtoMessage()               {}
func (*Registry) Descriptor() ([]byte, []int) { return fileDescriptorNamespace, []int{7} }

func (m *Registry) GetNamespaces() map[string]*NamespaceOptions {
	if m != nil {
		return m.Namespaces
	}
	return nil
}

type NamespaceRuntimeOptions struct {
	WriteIndexingPerCPUConcurrency *google_protobuf1.DoubleValue `protobuf:"bytes,1,opt,name=writeIndexingPerCPUConcurrency" json:"writeIndexingPerCPUConcurrency,omitempty"`
	FlushIndexingPerCPUConcurrency *google_protobuf1.DoubleValue `protobuf:"bytes,2,opt,name=flushIndexingPerCPUConcurrency" json:"flushIndexingPerCPUConcurrency,omitempty"`
}

func (m *NamespaceRuntimeOptions) Reset()                    { *m = NamespaceRuntimeOptions{} }
func (m *NamespaceRuntimeOptions) String() string            { return proto.CompactTextString(m) }
func (*NamespaceRuntimeOptions) ProtoMessage()               {}
func (*NamespaceRuntimeOptions) Descriptor() ([]byte, []int) { return fileDescriptorNamespace, []int{8} }

func (m *NamespaceRuntimeOptions) GetWriteIndexingPerCPUConcurrency() *google_protobuf1.DoubleValue {
	if m != nil {
		return m.WriteIndexingPerCPUConcurrency
	}
	return nil
}

func (m *NamespaceRuntimeOptions) GetFlushIndexingPerCPUConcurrency() *google_protobuf1.DoubleValue {
	if m != nil {
		return m.FlushIndexingPerCPUConcurrency
	}
	return nil
}

func init() {
	proto.RegisterType((*RetentionOptions)(nil), "namespace.RetentionOptions")
	proto.RegisterType((*IndexOptions)(nil), "namespace.IndexOptions")
	proto.RegisterType((*NamespaceOptions)(nil), "namespace.NamespaceOptions")
	proto.RegisterType((*AggregationOptions)(nil), "namespace.AggregationOptions")
	proto.RegisterType((*Aggregation)(nil), "namespace.Aggregation")
	proto.RegisterType((*AggregatedAttributes)(nil), "namespace.AggregatedAttributes")
	proto.RegisterType((*DownsampleOptions)(nil), "namespace.DownsampleOptions")
	proto.RegisterType((*Registry)(nil), "namespace.Registry")
	proto.RegisterType((*NamespaceRuntimeOptions)(nil), "namespace.NamespaceRuntimeOptions")
}
func (m *RetentionOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetentionOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RetentionPeriodNanos != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNamespace(dAtA, i, uint64(m.RetentionPeriodNanos))
	}
	if m.BlockSizeNanos != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNamespace(dAtA, i, uint64(m.BlockSizeNanos))
	}
	if m.BufferFutureNanos != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNamespace(dAtA, i, uint64(m.BufferFutureNanos))
	}
	if m.BufferPastNanos != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintNamespace(dAtA, i, uint64(m.BufferPastNanos))
	}
	if m.BlockDataExpiry {
		dAtA[i] = 0x28
		i++
		if m.BlockDataExpiry {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BlockDataExpiryAfterNotAccessPeriodNanos != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintNamespace(dAtA, i, uint64(m.BlockDataExpiryAfterNotAccessPeriodNanos))
	}
	if m.FutureRetentionPeriodNanos != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintNamespace(dAtA, i, uint64(m.FutureRetentionPeriodNanos))
	}
	return i, nil
}

func (m *IndexOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Enabled {
		dAtA[i] = 0x8
		i++
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BlockSizeNanos != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNamespace(dAtA, i, uint64(m.BlockSizeNanos))
	}
	return i, nil
}

func (m *NamespaceOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamespaceOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BootstrapEnabled {
		dAtA[i] = 0x8
		i++
		if m.BootstrapEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.FlushEnabled {
		dAtA[i] = 0x10
		i++
		if m.FlushEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.WritesToCommitLog {
		dAtA[i] = 0x18
		i++
		if m.WritesToCommitLog {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CleanupEnabled {
		dAtA[i] = 0x20
		i++
		if m.CleanupEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.RepairEnabled {
		dAtA[i] = 0x28
		i++
		if m.RepairEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.RetentionOptions != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintNamespace(dAtA, i, uint64(m.RetentionOptions.Size()))
		n1, err := m.RetentionOptions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.SnapshotEnabled {
		dAtA[i] = 0x38
		i++
		if m.SnapshotEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IndexOptions != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintNamespace(dAtA, i, uint64(m.IndexOptions.Size()))
		n2, err := m.IndexOptions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.SchemaOptions != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintNamespace(dAtA, i, uint64(m.SchemaOptions.Size()))
		n3, err := m.SchemaOptions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.ColdWritesEnabled {
		dAtA[i] = 0x50
		i++
		if m.ColdWritesEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.RuntimeOptions != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintNamespace(dAtA, i, uint64(m.RuntimeOptions.Size()))
		n4, err := m.RuntimeOptions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.CacheBlocksOnRetrieve != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintNamespace(dAtA, i, uint64(m.CacheBlocksOnRetrieve.Size()))
		n5, err := m.CacheBlocksOnRetrieve.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.AggregationOptions != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintNamespace(dAtA, i, uint64(m.AggregationOptions.Size()))
		n6, err := m.AggregationOptions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.ExtendedOptions != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintNamespace(dAtA, i, uint64(m.ExtendedOptions.Size()))
		n7, err := m.ExtendedOptions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *AggregationOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AggregationOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Aggregations) > 0 {
		for _, msg := range m.Aggregations {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNamespace(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Aggregation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Aggregation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Aggregated {
		dAtA[i] = 0x8
		i++
		if m.Aggregated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Attributes != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNamespace(dAtA, i, uint64(m.Attributes.Size()))
		n8, err := m.Attributes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *AggregatedAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AggregatedAttributes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ResolutionNanos != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNamespace(dAtA, i, uint64(m.ResolutionNanos))
	}
	if m.DownsampleOptions != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNamespace(dAtA, i, uint64(m.DownsampleOptions.Size()))
		n9, err := m.DownsampleOptions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *DownsampleOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownsampleOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.All {
		dAtA[i] = 0x8
		i++
		if m.All {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Registry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Registry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespaces) > 0 {
		for k, _ := range m.Namespaces {
			dAtA[i] = 0xa
			i++
			v := m.Namespaces[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovNamespace(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovNamespace(uint64(len(k))) + msgSize
			i = encodeVarintNamespace(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintNamespace(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintNamespace(dAtA, i, uint64(v.Size()))
				n10, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n10
			}
		}
	}
	return i, nil
}

func (m *NamespaceRuntimeOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamespaceRuntimeOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.WriteIndexingPerCPUConcurrency != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNamespace(dAtA, i, uint64(m.WriteIndexingPerCPUConcurrency.Size()))
		n11, err := m.WriteIndexingPerCPUConcurrency.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.FlushIndexingPerCPUConcurrency != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNamespace(dAtA, i, uint64(m.FlushIndexingPerCPUConcurrency.Size()))
		n12, err := m.FlushIndexingPerCPUConcurrency.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func encodeVarintNamespace(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RetentionOptions) Size() (n int) {
	var l int
	_ = l
	if m.RetentionPeriodNanos != 0 {
		n += 1 + sovNamespace(uint64(m.RetentionPeriodNanos))
	}
	if m.BlockSizeNanos != 0 {
		n += 1 + sovNamespace(uint64(m.BlockSizeNanos))
	}
	if m.BufferFutureNanos != 0 {
		n += 1 + sovNamespace(uint64(m.BufferFutureNanos))
	}
	if m.BufferPastNanos != 0 {
		n += 1 + sovNamespace(uint64(m.BufferPastNanos))
	}
	if m.BlockDataExpiry {
		n += 2
	}
	if m.BlockDataExpiryAfterNotAccessPeriodNanos != 0 {
		n += 1 + sovNamespace(uint64(m.BlockDataExpiryAfterNotAccessPeriodNanos))
	}
	if m.FutureRetentionPeriodNanos != 0 {
		n += 1 + sovNamespace(uint64(m.FutureRetentionPeriodNanos))
	}
	return n
}

func (m *IndexOptions) Size() (n int) {
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	if m.BlockSizeNanos != 0 {
		n += 1 + sovNamespace(uint64(m.BlockSizeNanos))
	}
	return n
}

func (m *NamespaceOptions) Size() (n int) {
	var l int
	_ = l
	if m.BootstrapEnabled {
		n += 2
	}
	if m.FlushEnabled {
		n += 2
	}
	if m.WritesToCommitLog {
		n += 2
	}
	if m.CleanupEnabled {
		n += 2
	}
	if m.RepairEnabled {
		n += 2
	}
	if m.RetentionOptions != nil {
		l = m.RetentionOptions.Size()
		n += 1 + l + sovNamespace(uint64(l))
	}
	if m.SnapshotEnabled {
		n += 2
	}
	if m.IndexOptions != nil {
		l = m.IndexOptions.Size()
		n += 1 + l + sovNamespace(uint64(l))
	}
	if m.SchemaOptions != nil {
		l = m.SchemaOptions.Size()
		n += 1 + l + sovNamespace(uint64(l))
	}
	if m.ColdWritesEnabled {
		n += 2
	}
	if m.RuntimeOptions != nil {
		l = m.RuntimeOptions.Size()
		n += 1 + l + sovNamespace(uint64(l))
	}
	if m.CacheBlocksOnRetrieve != nil {
		l = m.CacheBlocksOnRetrieve.Size()
		n += 1 + l + sovNamespace(uint64(l))
	}
	if m.AggregationOptions != nil {
		l = m.AggregationOptions.Size()
		n += 1 + l + sovNamespace(uint64(l))
	}
	if m.ExtendedOptions != nil {
		l = m.ExtendedOptions.Size()
		n += 1 + l + sovNamespace(uint64(l))
	}
	return n
}

func (m *AggregationOptions) Size() (n int) {
	var l int
	_ = l
	if len(m.Aggregations) > 0 {
		for _, e := range m.Aggregations {
			l = e.Size()
			n += 1 + l + sovNamespace(uint64(l))
		}
	}
	return n
}

func (m *Aggregation) Size() (n int) {
	var l int
	_ = l
	if m.Aggregated {
		n += 2
	}
	if m.Attributes != nil {
		l = m.Attributes.Size()
		n += 1 + l + sovNamespace(uint64(l))
	}
	return n
}

func (m *AggregatedAttributes) Size() (n int) {
	var l int
	_ = l
	if m.ResolutionNanos != 0 {
		n += 1 + sovNamespace(uint64(m.ResolutionNanos))
	}
	if m.DownsampleOptions != nil {
		l = m.DownsampleOptions.Size()
		n += 1 + l + sovNamespace(uint64(l))
	}
	return n
}

func (m *DownsampleOptions) Size() (n int) {
	var l int
	_ = l
	if m.All {
		n += 2
	}
	return n
}

func (m *Registry) Size() (n int) {
	var l int
	_ = l
	if len(m.Namespaces) > 0 {
		for k, v := range m.Namespaces {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovNamespace(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovNamespace(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovNamespace(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *NamespaceRuntimeOptions) Size() (n int) {
	var l int
	_ = l
	if m.WriteIndexingPerCPUConcurrency != nil {
		l = m.WriteIndexingPerCPUConcurrency.Size()
		n += 1 + l + sovNamespace(uint64(l))
	}
	if m.FlushIndexingPerCPUConcurrency != nil {
		l = m.FlushIndexingPerCPUConcurrency.Size()
		n += 1 + l + sovNamespace(uint64(l))
	}
	return n
}

func sovNamespace(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNamespace(x uint64) (n int) {
	return sovNamespace(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RetentionOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNamespace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetentionOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetentionOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetentionPeriodNanos", wireType)
			}
			m.RetentionPeriodNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetentionPeriodNanos |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockSizeNanos", wireType)
			}
			m.BlockSizeNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockSizeNanos |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufferFutureNanos", wireType)
			}
			m.BufferFutureNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BufferFutureNanos |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufferPastNanos", wireType)
			}
			m.BufferPastNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BufferPastNanos |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockDataExpiry", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BlockDataExpiry = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockDataExpiryAfterNotAccessPeriodNanos", wireType)
			}
			m.BlockDataExpiryAfterNotAccessPeriodNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockDataExpiryAfterNotAccessPeriodNanos |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FutureRetentionPeriodNanos", wireType)
			}
			m.FutureRetentionPeriodNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FutureRetentionPeriodNanos |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNamespace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNamespace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNamespace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockSizeNanos", wireType)
			}
			m.BlockSizeNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockSizeNanos |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNamespace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNamespace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NamespaceOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNamespace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamespaceOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamespaceOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BootstrapEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BootstrapEnabled = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlushEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FlushEnabled = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WritesToCommitLog", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WritesToCommitLog = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CleanupEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CleanupEnabled = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepairEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RepairEnabled = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetentionOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RetentionOptions == nil {
				m.RetentionOptions = &RetentionOptions{}
			}
			if err := m.RetentionOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SnapshotEnabled = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IndexOptions == nil {
				m.IndexOptions = &IndexOptions{}
			}
			if err := m.IndexOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SchemaOptions == nil {
				m.SchemaOptions = &SchemaOptions{}
			}
			if err := m.SchemaOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColdWritesEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ColdWritesEnabled = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuntimeOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RuntimeOptions == nil {
				m.RuntimeOptions = &NamespaceRuntimeOptions{}
			}
			if err := m.RuntimeOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheBlocksOnRetrieve", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CacheBlocksOnRetrieve == nil {
				m.CacheBlocksOnRetrieve = &google_protobuf1.BoolValue{}
			}
			if err := m.CacheBlocksOnRetrieve.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregationOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AggregationOptions == nil {
				m.AggregationOptions = &AggregationOptions{}
			}
			if err := m.AggregationOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtendedOptions == nil {
				m.ExtendedOptions = &google_protobuf.Any{}
			}
			if err := m.ExtendedOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNamespace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNamespace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AggregationOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNamespace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AggregationOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AggregationOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aggregations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Aggregations = append(m.Aggregations, &Aggregation{})
			if err := m.Aggregations[len(m.Aggregations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNamespace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNamespace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Aggregation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNamespace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Aggregation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Aggregation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aggregated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Aggregated = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attributes == nil {
				m.Attributes = &AggregatedAttributes{}
			}
			if err := m.Attributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNamespace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNamespace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AggregatedAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNamespace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AggregatedAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AggregatedAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolutionNanos", wireType)
			}
			m.ResolutionNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResolutionNanos |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownsampleOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DownsampleOptions == nil {
				m.DownsampleOptions = &DownsampleOptions{}
			}
			if err := m.DownsampleOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNamespace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNamespace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownsampleOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNamespace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownsampleOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownsampleOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field All", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.All = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipNamespace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNamespace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Registry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNamespace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Registry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Registry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Namespaces == nil {
				m.Namespaces = make(map[string]*NamespaceOptions)
			}
			var mapkey string
			var mapvalue *NamespaceOptions
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNamespace
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNamespace
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthNamespace
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNamespace
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthNamespace
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthNamespace
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &NamespaceOptions{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipNamespace(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthNamespace
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Namespaces[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNamespace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNamespace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NamespaceRuntimeOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNamespace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamespaceRuntimeOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamespaceRuntimeOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WriteIndexingPerCPUConcurrency", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WriteIndexingPerCPUConcurrency == nil {
				m.WriteIndexingPerCPUConcurrency = &google_protobuf1.DoubleValue{}
			}
			if err := m.WriteIndexingPerCPUConcurrency.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlushIndexingPerCPUConcurrency", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FlushIndexingPerCPUConcurrency == nil {
				m.FlushIndexingPerCPUConcurrency = &google_protobuf1.DoubleValue{}
			}
			if err := m.FlushIndexingPerCPUConcurrency.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNamespace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNamespace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNamespace(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNamespace
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthNamespace
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNamespace
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNamespace(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNamespace = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNamespace   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/m3db/m3/src/dbnode/generated/proto/namespace/namespace.proto", fileDescriptorNamespace)
}

var fileDescriptorNamespace = []byte{
	// 875 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0xc6, 0xcd, 0x6e, 0x9b, 0x9e, 0xa4, 0x6d, 0x3a, 0x2a, 0x6c, 0xc8, 0x42, 0x58, 0x99, 0x1f,
	0x45, 0x08, 0x25, 0xa2, 0xbd, 0x41, 0x8b, 0x54, 0x94, 0xfe, 0xb0, 0x62, 0x05, 0xdd, 0x68, 0x96,
	0x1f, 0x69, 0xef, 0xc6, 0xf6, 0x89, 0x63, 0xad, 0x3d, 0x63, 0xcd, 0x8c, 0xb7, 0x0d, 0xcf, 0xb0,
	0x17, 0xbc, 0x06, 0xe2, 0x45, 0xb8, 0xe4, 0x11, 0x50, 0x11, 0xef, 0x81, 0x3c, 0x13, 0xa7, 0x8e,
	0x9d, 0x2d, 0xd5, 0xde, 0x44, 0xce, 0x77, 0xbe, 0x73, 0xbe, 0x33, 0xe7, 0x0f, 0x9e, 0x84, 0x91,
	0x9e, 0x65, 0xde, 0xd0, 0x17, 0xc9, 0x28, 0x39, 0x0a, 0xbc, 0x51, 0x72, 0x34, 0x52, 0xd2, 0x1f,
	0x05, 0x1e, 0x17, 0x01, 0x8e, 0x42, 0xe4, 0x28, 0x99, 0xc6, 0x60, 0x94, 0x4a, 0xa1, 0xc5, 0x88,
	0xb3, 0x04, 0x55, 0xca, 0x7c, 0xbc, 0xf9, 0x1a, 0x1a, 0x0b, 0xd9, 0x5e, 0x02, 0xbd, 0xf7, 0x43,
	0x21, 0xc2, 0x18, 0xad, 0x8b, 0x97, 0x4d, 0x47, 0x8c, 0xcf, 0x2d, 0xab, 0xd7, 0xaf, 0x9a, 0x2e,
	0x25, 0x4b, 0x53, 0x94, 0x6a, 0x61, 0x3f, 0x7b, 0xdb, 0x74, 0x94, 0x3f, 0xc3, 0x84, 0xd9, 0x28,
	0xee, 0xeb, 0x06, 0x74, 0x28, 0x6a, 0xe4, 0x3a, 0x12, 0xfc, 0x59, 0x9a, 0xff, 0x2a, 0x72, 0x08,
	0x07, 0xb2, 0xc0, 0x26, 0x28, 0x23, 0x11, 0x5c, 0x30, 0x2e, 0x54, 0xd7, 0x79, 0xe4, 0x0c, 0x1a,
	0x74, 0xad, 0x8d, 0x7c, 0x06, 0xbb, 0x5e, 0x2c, 0xfc, 0x97, 0xcf, 0xa3, 0x5f, 0xd1, 0xb2, 0x37,
	0x0c, 0xbb, 0x82, 0x92, 0x2f, 0x60, 0xdf, 0xcb, 0xa6, 0x53, 0x94, 0xdf, 0x66, 0x3a, 0x93, 0x0b,
	0x6a, 0xc3, 0x50, 0xeb, 0x06, 0x32, 0x80, 0x3d, 0x0b, 0x4e, 0x98, 0xd2, 0x96, 0x7b, 0xcf, 0x70,
	0xab, 0xb0, 0x61, 0xe6, 0x4a, 0x67, 0x4c, 0xb3, 0xf3, 0xab, 0x34, 0x92, 0xf3, 0xee, 0xfd, 0x47,
	0xce, 0xa0, 0x49, 0xab, 0x30, 0x79, 0x01, 0x83, 0x0a, 0x34, 0x9e, 0x6a, 0x94, 0x17, 0x42, 0x8f,
	0x7d, 0x1f, 0x95, 0x2a, 0xbf, 0x78, 0xd3, 0x88, 0xdd, 0x99, 0x4f, 0x8e, 0xa1, 0x37, 0x35, 0xe9,
	0xd3, 0x75, 0xf5, 0xdb, 0x32, 0xd1, 0x6e, 0x61, 0xb8, 0x13, 0x68, 0x7f, 0xc7, 0x03, 0xbc, 0x2a,
	0x3a, 0xd1, 0x85, 0x2d, 0xe4, 0xcc, 0x8b, 0x31, 0x30, 0xc5, 0x6f, 0xd2, 0xe2, 0xef, 0x5d, 0xeb,
	0xed, 0xfe, 0xbe, 0x09, 0x9d, 0x8b, 0xa2, 0xf7, 0x45, 0xd8, 0xcf, 0xa1, 0xe3, 0x09, 0xa1, 0x95,
	0x96, 0x2c, 0x3d, 0x5f, 0x89, 0x5f, 0xc3, 0x89, 0x0b, 0xed, 0x69, 0x9c, 0xa9, 0x59, 0xc1, 0xdb,
	0x30, 0xbc, 0x15, 0x2c, 0x6f, 0xea, 0xa5, 0x8c, 0x34, 0xaa, 0x1f, 0xc5, 0xa9, 0x48, 0x92, 0x48,
	0x7f, 0x2f, 0x42, 0xd3, 0xd4, 0x26, 0xad, 0x1b, 0xf2, 0xd4, 0xfd, 0x18, 0x19, 0xcf, 0x96, 0xda,
	0xf7, 0x0c, 0xb5, 0x82, 0x92, 0x4f, 0x60, 0x47, 0x62, 0xca, 0x22, 0x59, 0xd0, 0x6c, 0x43, 0x57,
	0x41, 0xf2, 0x04, 0x3a, 0xb2, 0x32, 0xc0, 0xa6, 0x6d, 0xad, 0xc3, 0x87, 0xc3, 0x9b, 0xcd, 0xab,
	0xce, 0x38, 0xad, 0x39, 0xe5, 0x13, 0xa4, 0x38, 0x4b, 0xd5, 0x4c, 0xe8, 0x42, 0x70, 0xcb, 0x4e,
	0x50, 0x05, 0x26, 0x5f, 0x43, 0x3b, 0x2a, 0x75, 0xa9, 0xdb, 0x34, 0x72, 0x0f, 0x4a, 0x72, 0xe5,
	0x26, 0xd2, 0x15, 0x32, 0x39, 0x86, 0x1d, 0xbb, 0x81, 0x85, 0xf7, 0xb6, 0xf1, 0xee, 0x96, 0xbc,
	0x9f, 0x97, 0xed, 0x74, 0x95, 0x9e, 0xd7, 0xda, 0x17, 0x71, 0xf0, 0x8b, 0x29, 0x6b, 0x91, 0x28,
	0xd8, 0x5a, 0xd7, 0x0c, 0xe4, 0x29, 0xec, 0xca, 0x8c, 0xeb, 0x28, 0x29, 0x7a, 0xdf, 0x6d, 0x19,
	0x39, 0xb7, 0x24, 0xb7, 0x1c, 0x0f, 0xba, 0xc2, 0xa4, 0x15, 0x4f, 0x32, 0x81, 0x77, 0x7d, 0xe6,
	0xcf, 0xf0, 0x24, 0x9f, 0x30, 0xf5, 0x8c, 0x53, 0xd4, 0x32, 0xc2, 0x57, 0xd8, 0x6d, 0x9b, 0x90,
	0xbd, 0xa1, 0xbd, 0x58, 0xc3, 0xe2, 0x62, 0x0d, 0x4f, 0x84, 0x88, 0x7f, 0x66, 0x71, 0x86, 0x74,
	0xbd, 0x23, 0xf9, 0x01, 0x08, 0x0b, 0x43, 0x89, 0x21, 0x2b, 0x77, 0x6f, 0xc7, 0x84, 0xfb, 0xb0,
	0x94, 0xe1, 0xb8, 0x46, 0xa2, 0x6b, 0x1c, 0xc9, 0x31, 0xec, 0xe1, 0x95, 0x46, 0x1e, 0x60, 0x50,
	0xc4, 0xda, 0x35, 0xb1, 0x0e, 0x6a, 0xa9, 0x8d, 0xf9, 0x9c, 0x56, 0xc9, 0xee, 0x04, 0x48, 0x5d,
	0x89, 0x3c, 0x86, 0x76, 0x49, 0x2b, 0xbf, 0x82, 0x8d, 0x41, 0xeb, 0xf0, 0xbd, 0xf5, 0xe9, 0xd1,
	0x15, 0xae, 0xcb, 0xa1, 0x55, 0x32, 0x92, 0x3e, 0x40, 0x61, 0x5e, 0x6e, 0x5c, 0x09, 0x21, 0xdf,
	0x00, 0x30, 0xad, 0x65, 0xe4, 0x65, 0x1a, 0xed, 0x42, 0xb7, 0x0e, 0x3f, 0x5a, 0x23, 0x84, 0xc1,
	0x78, 0x49, 0xa3, 0x25, 0x17, 0xf7, 0xb5, 0x03, 0x07, 0xeb, 0x48, 0xf9, 0x70, 0x4b, 0x54, 0x22,
	0xce, 0xf2, 0x3c, 0xca, 0xd7, 0xbc, 0x0a, 0x93, 0xa7, 0xb0, 0x1f, 0x88, 0x4b, 0xae, 0x58, 0x92,
	0xc6, 0xcb, 0xa1, 0xb1, 0xa9, 0x7c, 0x50, 0x4a, 0xe5, 0xac, 0xca, 0xa1, 0x75, 0x37, 0xf7, 0x53,
	0xd8, 0xaf, 0xf1, 0x48, 0x07, 0x1a, 0x2c, 0x8e, 0x17, 0xaf, 0xcf, 0x3f, 0xdd, 0x3f, 0x1c, 0x68,
	0x52, 0x0c, 0x23, 0xa5, 0xe5, 0x9c, 0x9c, 0x02, 0x2c, 0x55, 0x8a, 0x62, 0x7f, 0xbc, 0xb2, 0xc9,
	0x96, 0x78, 0x33, 0xb6, 0xea, 0x9c, 0x6b, 0x39, 0xa7, 0x25, 0xb7, 0xde, 0x0b, 0xd8, 0xab, 0x98,
	0x73, 0xd9, 0x97, 0x38, 0x37, 0xb2, 0xdb, 0x34, 0xff, 0x24, 0x5f, 0xc2, 0xfd, 0x57, 0xf9, 0x74,
	0x2e, 0x5e, 0xf7, 0x70, 0xdd, 0x4a, 0x14, 0x8f, 0xb3, 0xcc, 0xc7, 0x1b, 0x5f, 0x39, 0xee, 0xbf,
	0x0e, 0x3c, 0x78, 0xc3, 0xca, 0x90, 0x00, 0xfa, 0xe6, 0xde, 0x99, 0xfd, 0x8f, 0x78, 0x38, 0x41,
	0x79, 0x3a, 0xf9, 0xe9, 0x54, 0x70, 0x3f, 0x93, 0x12, 0xb9, 0x6f, 0xf5, 0xf3, 0x4a, 0x56, 0x07,
	0xf2, 0x4c, 0x64, 0x5e, 0x8c, 0x76, 0x5b, 0xfe, 0x27, 0x46, 0xae, 0x62, 0xce, 0xef, 0x9b, 0x55,
	0x36, 0xee, 0xa2, 0x72, 0x7b, 0x8c, 0x93, 0xce, 0x9f, 0xd7, 0x7d, 0xe7, 0xaf, 0xeb, 0xbe, 0xf3,
	0xf7, 0x75, 0xdf, 0xf9, 0xed, 0x9f, 0xfe, 0x3b, 0xde, 0xa6, 0x89, 0x73, 0xf4, 0x5f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x7f, 0xc9, 0xec, 0xa7, 0x0a, 0x09, 0x00, 0x00,
}
